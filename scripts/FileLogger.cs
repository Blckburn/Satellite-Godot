using Godot;
using System;
using System.IO;
using System.Globalization;
using System.Linq;

/// <summary>
/// üìÅ EPIC FILE LOGGING SYSTEM! 
/// –°–æ–∑–¥–∞–µ—Ç –ª–æ–≥–∏ –≤ –ø–∞–ø–∫–µ logs/ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π (–º–∞–∫—Å–∏–º—É–º 50 —Ñ–∞–π–ª–æ–≤)
/// –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤: YYYY-MM-DD_HH-mm-ss_run001.log
/// </summary>
public static class FileLogger
{
    private static string _logDirectory = "logs";
    private static string _currentLogFile = null;
    private static bool _isInitialized = false;
    private static readonly object _lock = new object();
    private static int _maxLogFiles = 50;
    
    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    /// </summary>
    public static void Initialize()
    {
        if (_isInitialized) return;
        
        lock (_lock)
        {
            if (_isInitialized) return;
            
            try
            {
                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if (!Directory.Exists(_logDirectory))
                {
                    Directory.CreateDirectory(_logDirectory);
                    GD.Print($"üìÅ Created logs directory: {_logDirectory}");
                }
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–æ–≥ —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                CreateNewLogFile();
                
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
                CleanupOldLogs();
                
                _isInitialized = true;
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥–∞
                WriteToFile("üöÄ ========== SATELLITE GAME LOG SESSION STARTED ==========");
                WriteToFile($"üìÖ Date: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
                WriteToFile($"üéÆ Godot Version: {Engine.GetVersionInfo()}");
                WriteToFile($"üíª Platform: {OS.GetName()}");
                WriteToFile("üöÄ =========================================================");
                WriteToFile("");
                
                GD.Print($"‚úÖ FileLogger initialized! Current log: {_currentLogFile}");
            }
            catch (Exception e)
            {
                GD.PrintErr($"‚ùå Failed to initialize FileLogger: {e.Message}");
            }
        }
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ª–æ–≥ —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
    /// </summary>
    private static void CreateNewLogFile()
    {
        DateTime now = DateTime.Now;
        string dateTime = now.ToString("yyyy-MM-dd_HH-mm-ss", CultureInfo.InvariantCulture);
        
        // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞–Ω–∞
        int runNumber = 1;
        string fileName;
        do
        {
            fileName = $"{dateTime}_run{runNumber:D3}.log";
            runNumber++;
        }
        while (File.Exists(Path.Combine(_logDirectory, fileName)) && runNumber <= 999);
        
        _currentLogFile = Path.Combine(_logDirectory, fileName);
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!File.Exists(_currentLogFile))
        {
            File.Create(_currentLogFile).Close();
        }
    }
    
    /// <summary>
    /// –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥ —Ñ–∞–π–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ _maxLogFiles
    /// </summary>
    private static void CleanupOldLogs()
    {
        try
        {
            var logFiles = Directory.GetFiles(_logDirectory, "*.log")
                .Select(f => new FileInfo(f))
                .OrderByDescending(f => f.CreationTime)
                .ToArray();
            
            if (logFiles.Length > _maxLogFiles)
            {
                int filesToDelete = logFiles.Length - _maxLogFiles;
                var filesToRemove = logFiles.Skip(_maxLogFiles).Take(filesToDelete);
                
                foreach (var file in filesToRemove)
                {
                    try
                    {
                        file.Delete();
                        GD.Print($"üóëÔ∏è Deleted old log: {file.Name}");
                    }
                    catch (Exception e)
                    {
                        GD.PrintErr($"‚ùå Failed to delete log {file.Name}: {e.Message}");
                    }
                }
                
                GD.Print($"üßπ Cleanup complete! Kept {_maxLogFiles} latest logs, deleted {filesToDelete} old logs.");
            }
        }
        catch (Exception e)
        {
            GD.PrintErr($"‚ùå Failed to cleanup old logs: {e.Message}");
        }
    }
    
    /// <summary>
    /// –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π –ª–æ–≥ —Ñ–∞–π–ª
    /// </summary>
    public static void WriteToFile(string message)
    {
        if (!_isInitialized)
        {
            Initialize();
        }
        
        if (string.IsNullOrEmpty(_currentLogFile)) return;
        
        lock (_lock)
        {
            try
            {
                string timestamp = DateTime.Now.ToString("HH:mm:ss.fff", CultureInfo.InvariantCulture);
                string logEntry = $"[{timestamp}] {message}";
                
                File.AppendAllText(_currentLogFile, logEntry + System.Environment.NewLine);
            }
            catch (Exception e)
            {
                GD.PrintErr($"‚ùå Failed to write to log file: {e.Message}");
            }
        }
    }
    
    /// <summary>
    /// –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤ –∫–æ–Ω—Å–æ–ª—å, —Ç–∞–∫ –∏ –≤ —Ñ–∞–π–ª
    /// </summary>
    public static void Log(string message, bool showInConsole = true)
    {
        if (showInConsole)
        {
            GD.Print(message);
        }
        
        WriteToFile(message);
    }
    
    /// <summary>
    /// –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∫–∞–∫ –≤ –∫–æ–Ω—Å–æ–ª—å, —Ç–∞–∫ –∏ –≤ —Ñ–∞–π–ª
    /// </summary>
    public static void LogError(string message)
    {
        GD.PrintErr(message);
        WriteToFile($"‚ùå ERROR: {message}");
    }
    
    /// <summary>
    /// –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–∞–∫ –≤ –∫–æ–Ω—Å–æ–ª—å, —Ç–∞–∫ –∏ –≤ —Ñ–∞–π–ª
    /// </summary>
    public static void LogWarning(string message)
    {
        GD.Print($"‚ö†Ô∏è WARNING: {message}");
        WriteToFile($"‚ö†Ô∏è WARNING: {message}");
    }
    
    /// <summary>
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –ª–æ–≥ —Ñ–∞–π–ª—É
    /// </summary>
    public static string GetCurrentLogFile()
    {
        return _currentLogFile ?? "Not initialized";
    }
    
    /// <summary>
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–≥ —Ñ–∞–π–ª–æ–≤
    /// </summary>
    public static string[] GetAllLogFiles()
    {
        try
        {
            if (!Directory.Exists(_logDirectory))
                return new string[0];
                
            return Directory.GetFiles(_logDirectory, "*.log")
                .Select(Path.GetFileName)
                .OrderByDescending(f => f)
                .ToArray();
        }
        catch (Exception e)
        {
            GD.PrintErr($"‚ùå Failed to get log files: {e.Message}");
            return new string[0];
        }
    }
}
