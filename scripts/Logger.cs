using Godot;
using System.Collections.Generic;

public static class Logger
{
    public static bool EnableDebugLogs = true;
    public static bool EnableFileLogging = true;
    private static readonly Dictionary<string, bool> _loggedMessages = new Dictionary<string, bool>();

    public static void Debug(string message, bool onceOnly = false)
    {
        if (!EnableDebugLogs) return;

        if (onceOnly)
        {
            string key = message;
            if (_loggedMessages.ContainsKey(key))
                return;

            _loggedMessages[key] = true;
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        GD.Print(message);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (EnableFileLogging)
        {
            FileLogger.WriteToFile($"DEBUG: {message}");
        }
    }

    public static void Error(string message)
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        GD.PushError(message);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (EnableFileLogging)
        {
            FileLogger.WriteToFile($"ERROR: {message}");
        }
    }
    
    public static void Warning(string message)
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        GD.Print($"‚ö†Ô∏è WARNING: {message}");
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (EnableFileLogging)
        {
            FileLogger.WriteToFile($"WARNING: {message}");
        }
    }
    
    public static void Info(string message)
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        GD.Print($"‚ÑπÔ∏è INFO: {message}");
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (EnableFileLogging)
        {
            FileLogger.WriteToFile($"INFO: {message}");
        }
    }

    public static void ClearOnceOnlyLogs()
    {
        _loggedMessages.Clear();
    }
    
    public static void InitializeFileLogging()
    {
        if (EnableFileLogging)
        {
            FileLogger.Initialize();
            Info("üìÅ File logging system initialized!");
        }
    }
    
    public static string GetCurrentLogFile()
    {
        return FileLogger.GetCurrentLogFile();
    }
}