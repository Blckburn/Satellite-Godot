using Godot;
using System;

public partial class UIManager : CanvasLayer
{
    // –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ UIManager –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
    public static UIManager Instance { get; private set; }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ InteractionSystem
    [Export] public NodePath InteractionSystemPath;

    // –°—Å—ã–ª–∫–∏ –Ω–∞ UI —ç–ª–µ–º–µ–Ω—Ç—ã
    private Label _interactionHintLabel;
    private ProgressBar _interactionProgressBar;
    
    // DEBUG HUD –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–≥–ª–æ–≤ –∫–∞—Ä—Ç—ã
    private Label _debugCornersLabel;
    private Label _seedLabel;
    private int _currentSeed = -1;

    // –°—Å—ã–ª–∫–∞ –Ω–∞ InteractionSystem
    private InteractionSystem _interactionSystem;

    public override void _Ready()
    {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
        if (Instance == null)
            Instance = this;
        else
            Logger.Debug("Multiple UIManager instances found!", true);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        InitializeUIComponents();

        // –ù–∞—Ö–æ–¥–∏–º InteractionSystem
        _interactionSystem = GetInteractionSystem();

        Logger.Debug("UIManager initialized", true);
    }

    public override void _ExitTree()
    {
        // –û—á–∏—Å—Ç–∫–∞ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        if (Instance == this)
            Instance = null;
    }

    private InteractionSystem GetInteractionSystem()
    {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
        if (!string.IsNullOrEmpty(InteractionSystemPath))
        {
            var system = GetNode<InteractionSystem>(InteractionSystemPath);
            if (system != null)
            {
                Logger.Debug("InteractionSystem found via exported path", true);
                return system;
            }
        }

        // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É
        var systems = GetTree().GetNodesInGroup("InteractionSystem");
        if (systems.Count > 0 && systems[0] is InteractionSystem groupSystem)
        {
            Logger.Debug("InteractionSystem found via group", true);
            return groupSystem;
        }

        // –ù–∞–∫–æ–Ω–µ—Ü, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ —É–∑–ª–∞ –≤ —Å—Ü–µ–Ω–µ
        var sceneSystem = GetTree().Root.FindChild("InteractionSystem", true, false);
        if (sceneSystem is InteractionSystem foundSystem)
        {
            Logger.Debug("InteractionSystem found by name in scene", true);
            return foundSystem;
        }

        Logger.Error("UIManager: InteractionSystem not found!");
        return null;
    }

    private void InitializeUIComponents()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        _interactionHintLabel = GetNodeOrNull<Label>("%InteractionHint");

        if (_interactionHintLabel == null)
            Logger.Error("UIManager: InteractionHint label not found");
        else
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –º–µ—Ç–∫–∏
            _interactionHintLabel.Visible = false;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        _interactionProgressBar = GetNodeOrNull<ProgressBar>("%InteractionProgress");

        if (_interactionProgressBar == null)
            Logger.Error("UIManager: InteractionProgress bar not found");
        else
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            _interactionProgressBar.Visible = false;
            _interactionProgressBar.MinValue = 0;
            _interactionProgressBar.MaxValue = 100;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DEBUG HUD –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–≥–ª–æ–≤
        CreateDebugCornersHUD();
        CreateSeedHUD();
    }

    public override void _Process(double delta)
    {
        if (_interactionSystem != null)
            UpdateInteractionUI();
    }

    public override void _Input(InputEvent @event)
    {
        if (@event is InputEventKey key && key.Pressed && !key.Echo)
        {
            if (key.CtrlPressed && key.AltPressed && key.Keycode == Key.C)
            {
                if (_currentSeed >= 0)
                {
                    DisplayServer.ClipboardSet(_currentSeed.ToString());
                    // –≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    if (_seedLabel != null)
                    {
                        string prev = _seedLabel.Text;
                        _seedLabel.Text = $"Seed: {_currentSeed}  (copied)";
                        GetTree().CreateTimer(1.2).Timeout += () =>
                        {
                            UpdateSeedLabelText();
                        };
                    }
                }
            }
        }
    }

    private void UpdateInteractionUI()
    {
        if (_interactionHintLabel == null)
            return;

        var currentInteractable = _interactionSystem.GetCurrentInteractable();

        if (currentInteractable != null)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
            string hintText = currentInteractable.GetInteractionHint();
            _interactionHintLabel.Text = hintText;
            _interactionHintLabel.Visible = true;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            if (_interactionProgressBar != null &&
                currentInteractable is IInteraction interaction &&
                interaction.IsInteracting())
            {
                float progress = interaction.GetInteractionProgress();
                _interactionProgressBar.Value = progress * 100;
                _interactionProgressBar.Visible = true;

                // –í—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                Logger.Debug($"Interaction progress: {progress * 100:F1}%", false);
            }
            else if (_interactionProgressBar != null)
            {
                _interactionProgressBar.Visible = false;
            }
        }
        else
        {
            // –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã UI
            _interactionHintLabel.Visible = false;

            if (_interactionProgressBar != null)
                _interactionProgressBar.Visible = false;
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI

    public void ShowInteractionHint(string text)
    {
        if (_interactionHintLabel != null)
        {
            _interactionHintLabel.Text = text;
            _interactionHintLabel.Visible = true;
        }
    }

    public void HideInteractionHint()
    {
        if (_interactionHintLabel != null)
            _interactionHintLabel.Visible = false;
    }

    public void UpdateProgressBar(float progress)
    {
        if (_interactionProgressBar != null)
        {
            _interactionProgressBar.Value = progress * 100;
        }
    }
    
    // ===== üéØ DEBUG HUD –î–õ–Ø –ö–û–û–†–î–ò–ù–ê–¢ –£–ì–õ–û–í –ö–ê–†–¢–´ =====
    
    private void CreateDebugCornersHUD()
    {
        // –°–æ–∑–¥–∞–µ–º Label –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–≥–ª–æ–≤ –∫–∞—Ä—Ç—ã
        _debugCornersLabel = new Label();
        _debugCornersLabel.Name = "DebugCornersLabel";
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞
        _debugCornersLabel.SetAnchorsAndOffsetsPreset(Control.LayoutPreset.TopLeft);
        _debugCornersLabel.Position = new Vector2(10, 10);
        _debugCornersLabel.Size = new Vector2(400, 150);
        
        // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        _debugCornersLabel.AutowrapMode = TextServer.AutowrapMode.WordSmart;
        _debugCornersLabel.VerticalAlignment = VerticalAlignment.Top;
        
        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ - –º–µ—à–∞–µ—Ç –∞–Ω–∞–ª–∏–∑—É
        _debugCornersLabel.Visible = false;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫ UI
        AddChild(_debugCornersLabel);
        
        Logger.Debug("DEBUG HUD for corner coordinates created", true);
    }
    
    public void UpdateDebugCorners(string cornersInfo)
    {
        if (_debugCornersLabel != null)
        {
            _debugCornersLabel.Text = cornersInfo;
            Logger.Debug($"Updated DEBUG HUD with corners info: {cornersInfo}", false);
        }
    }

    private void CreateSeedHUD()
    {
        _seedLabel = new Label();
        _seedLabel.Name = "SeedLabel";
        _seedLabel.SetAnchorsAndOffsetsPreset(Control.LayoutPreset.TopRight);
        _seedLabel.Position = new Vector2(-300, 10);
        _seedLabel.Size = new Vector2(290, 38);
        _seedLabel.AutowrapMode = TextServer.AutowrapMode.WordSmart;
        _seedLabel.Visible = true;
        AddChild(_seedLabel);
    }

    public static void ShowSeed(int seed)
    {
        if (Instance?. _seedLabel != null)
        {
            Instance._currentSeed = seed;
            Instance.UpdateSeedLabelText();
            Instance._seedLabel.Visible = true;
        }
    }

    private void UpdateSeedLabelText()
    {
        if (_seedLabel == null) return;
        _seedLabel.Text = $"Seed: {_currentSeed}\nPress Ctrl+Alt+C to copy";
    }
    
    public static void SetMapCorners(Vector2I topLeft, Vector2I topRight, Vector2I bottomLeft, Vector2I bottomRight, 
                                    Vector2 topLeftWorld, Vector2 topRightWorld, Vector2 bottomLeftWorld, Vector2 bottomRightWorld)
    {
        if (Instance != null)
        {
            string cornersInfo = $"üéØ –£–ì–õ–´ –ö–ê–†–¢–´:\n" +
                               $"TopLeft: {topLeft} -> ({topLeftWorld.X:F0}, {topLeftWorld.Y:F0})\n" +
                               $"TopRight: {topRight} -> ({topRightWorld.X:F0}, {topRightWorld.Y:F0})\n" +
                               $"BottomLeft: {bottomLeft} -> ({bottomLeftWorld.X:F0}, {bottomLeftWorld.Y:F0})\n" +
                               $"BottomRight: {bottomRight} -> ({bottomRightWorld.X:F0}, {bottomRightWorld.Y:F0})";
            
            Instance.UpdateDebugCorners(cornersInfo);
        }
    }

    public void HideProgressBar()
    {
        if (_interactionProgressBar != null)
            _interactionProgressBar.Visible = false;
    }
}